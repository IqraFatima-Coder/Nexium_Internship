
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Loader2, BookOpen, Clock, Trash2, Share, ShoppingCart } from "lucide-react";
import { createClient } from "@/lib/supabase/client";

interface SavedRecipe {
  id: string;
  title: string;
  content: string;
  cooking_time?: string;
  difficulty?: string;
  servings?: string;
  ingredients_used: string[];
  appliances_used: string[];
  created_at: string;
}

export function SavedRecipes() {
  const [recipes, setRecipes] = useState<SavedRecipe[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [deletingRecipes, setDeletingRecipes] = useState<Set<string>>(new Set());
  const [addingToShoppingList, setAddingToShoppingList] = useState<Set<string>>(new Set());
  
  const supabase = createClient();

  // Toggle item completion
  const deleteRecipe = async (recipeId: string) => {
    setDeletingRecipes(prev => new Set([...prev, recipeId]));
    
    try {
      const { error } = await supabase
        .from('saved_recipes')
        .delete()
        .eq('id', recipeId);

      if (error) throw error;

      // Update local state
      setRecipes(prev => prev.filter(recipe => recipe.id !== recipeId));
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete recipe');
    } finally {
      setDeletingRecipes(prev => {
        const newSet = new Set(prev);
        newSet.delete(recipeId);
        return newSet;
      });
    }
  };

  // Share recipe functionality
  const shareRecipe = async (recipe: SavedRecipe) => {
    try {
      const shareText = `🍴 ${recipe.title}\n\n${recipe.content}\n\nGenerated by NextMeal AI`;
      await navigator.clipboard.writeText(shareText);
      console.log('Recipe copied to clipboard!');
      // You could add a toast notification here
    } catch (err) {
      console.error('Failed to copy recipe:', err);
    }
  };

  // Add to shopping list functionality
  const addToShoppingList = async (recipe: SavedRecipe) => {
    setAddingToShoppingList(prev => new Set([...prev, recipe.id]));
    
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not found');

      console.log('🛒 Adding ingredients from saved recipe:', recipe.title);
      console.log('📝 Recipe content:', recipe.content);

      // Enhanced ingredient parsing - try multiple approaches
      let ingredients: string[] = [];
      const content = recipe.content;

      // Method 1: Look for ingredients section
      const ingredientSectionMatch = content.match(/(?:ingredients?:|what you need:)([\s\S]*?)(?:\n\n|instructions?:|method:|steps?:|preparation:|$)/i);
      
      if (ingredientSectionMatch) {
        console.log('✅ Found ingredients section');
        const ingredientsText = ingredientSectionMatch[1];
        ingredients = ingredientsText
          .split('\n')
          .map(line => line.trim())
          .filter(line => line && (line.startsWith('•') || line.startsWith('-') || line.startsWith('*') || /^\d+/.test(line)))
          .map(line => line.replace(/^[•\-\*\d\.\)\s]+/, '').trim())
          .filter(line => line.length > 2);
      }

      // Method 2: If no ingredients section found, look for lines that look like ingredients
      if (ingredients.length === 0) {
        console.log('⚠️ No ingredients section found, trying pattern matching');
        ingredients = content
          .split('\n')
          .map(line => line.trim())
          .filter(line => {
            // Look for lines that contain measurements or ingredient patterns
            return line.length > 3 && (
              /\d+\s*(cup|cups|tbsp|tsp|tablespoon|teaspoon|oz|ounce|pound|lb|gram|kg|ml|liter)/.test(line.toLowerCase()) ||
              line.startsWith('•') || line.startsWith('-') || line.startsWith('*') ||
              /^\d+/.test(line)
            );
          })
          .map(line => line.replace(/^[•\-\*\d\.\)\s]+/, '').trim())
          .filter(line => line.length > 2);
      }

      // Method 3: Fallback - use ingredients_used array if available
      if (ingredients.length === 0 && recipe.ingredients_used && recipe.ingredients_used.length > 0) {
        console.log('⚠️ Using ingredients_used array as fallback');
        ingredients = recipe.ingredients_used;
      }

      console.log('🥕 Final parsed ingredients:', ingredients);

      if (ingredients.length === 0) {
        throw new Error('No ingredients found in this recipe');
      }

      // Insert ingredients to shopping list (using correct table name)
      const shoppingListItems = ingredients.map(ingredient => ({
        user_id: user.id,
        ingredient_name: ingredient,
        quantity: '1 unit',
        recipe_title: recipe.title,
        is_completed: false
      }));

      console.log('💾 Inserting to shopping_list table:', shoppingListItems);

      const { error } = await supabase
        .from('shopping_list')
        .insert(shoppingListItems);

      if (error) {
        console.error('❌ Database error:', error);
        throw error;
      }

      console.log(`✅ Successfully added ${ingredients.length} ingredients to shopping list!`);
      
      // Show success message
      setError(null);
      // You could add a success toast here instead of alert
      alert(`Added ${ingredients.length} ingredients to your shopping list!`);

    } catch (err) {
      console.error('❌ Error in addToShoppingList:', err);
      setError(err instanceof Error ? err.message : 'Failed to add to shopping list');
    } finally {
      setAddingToShoppingList(prev => {
        const newSet = new Set(prev);
        newSet.delete(recipe.id);
        return newSet;
      });
    }
  };

  // Format recipe content for display
  const formatRecipeContent = (content: string) => {
    return content
      .split('\n')
      .map((line, index) => {
        // Bold headers
        if (line.startsWith('**') && line.endsWith('**')) {
          return <h3 key={index} className="font-semibold text-lg mt-4 mb-2">{line.replace(/\*\*/g, '')}</h3>;
        }
        // List items
        if (line.trim().startsWith('•') || line.trim().startsWith('-')) {
          return <li key={index} className="ml-4">{line.trim().substring(1).trim()}</li>;
        }
        // Numbers steps
        if (/^\d+\./.test(line.trim())) {
          return <div key={index} className="mb-2 font-medium">{line.trim()}</div>;
        }
        // Regular text
        if (line.trim()) {
          return <p key={index} className="mb-2">{line}</p>;
        }
        return null;
      })
      .filter(Boolean);
  };

  useEffect(() => {
    const loadSavedRecipes = async () => {
      try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) {
          setError("Please log in to view your saved recipes");
          return;
        }

        const { data, error } = await supabase
          .from('saved_recipes')
          .select('*')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false });

        if (error) throw error;
        setRecipes(data || []);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load saved recipes');
      } finally {
        setLoading(false);
      }
    };
    
    loadSavedRecipes();
  }, [supabase]);

  if (loading) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="flex items-center justify-center py-8">
            <Loader2 className="h-6 w-6 animate-spin" />
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BookOpen className="h-5 w-5" />
            Saved Recipes ({recipes.length})
          </CardTitle>
        </CardHeader>
        <CardContent>
          {error && (
            <div className="p-3 bg-red-50 border border-red-200 rounded-md mb-4">
              <p className="text-red-600 text-sm">{error}</p>
            </div>
          )}

          {recipes.length === 0 ? (
            <div className="text-center py-8">
              <BookOpen className="mx-auto h-12 w-12 text-foreground/30 mb-4" />
              <p className="text-foreground/60">No saved recipes yet</p>
              <p className="text-sm text-foreground/40 mt-1">
                Generate and save recipes to see them here
              </p>
            </div>
          ) : (
            <Accordion type="single" className="w-full">
              {recipes.map((recipe) => (
                <AccordionItem key={recipe.id} value={recipe.id}>
                  <AccordionTrigger className="hover:no-underline">
                    <div className="flex justify-between items-center w-full mr-4">
                      <div className="flex items-center gap-3 text-left">
                        <span className="font-semibold text-lg">{recipe.title}</span>
                        <div className="flex gap-2">
                          {recipe.cooking_time && (
                            <Badge variant="secondary" className="flex items-center gap-1 text-xs">
                              <Clock className="h-3 w-3" />
                              {recipe.cooking_time}
                            </Badge>
                          )}
                          {recipe.difficulty && (
                            <Badge variant="outline" className="text-xs">
                              {recipe.difficulty}
                            </Badge>
                          )}
                        </div>
                      </div>
                      <div className="text-sm text-foreground/60">
                        {new Date(recipe.created_at).toLocaleDateString()}
                      </div>
                    </div>
                  </AccordionTrigger>
                  
                  <AccordionContent>
                    <div className="space-y-4">
                      {/* Recipe Content with Scrollability */}
                      <div className="max-h-96 overflow-y-auto border rounded-lg p-4 bg-muted/20">
                        <div className="prose prose-sm max-w-none">
                          {formatRecipeContent(recipe.content)}
                        </div>
                      </div>

                      {/* Action Buttons */}
                      <div className="flex flex-wrap gap-2 pt-4 border-t">
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => addToShoppingList(recipe)}
                          disabled={addingToShoppingList.has(recipe.id)}
                          className="text-green-600 hover:text-green-700"
                        >
                          {addingToShoppingList.has(recipe.id) ? (
                            <>
                              <Loader2 className="mr-1 h-3 w-3 animate-spin" />
                              Adding...
                            </>
                          ) : (
                            <>
                              <ShoppingCart className="mr-1 h-3 w-3" />
                              Add to Shopping List
                            </>
                          )}
                        </Button>
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => shareRecipe(recipe)}
                        >
                          <Share className="mr-1 h-3 w-3" />
                          Copy Recipe
                        </Button>
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => deleteRecipe(recipe.id)}
                          disabled={deletingRecipes.has(recipe.id)}
                          className="text-red-600 hover:text-red-700"
                        >
                          {deletingRecipes.has(recipe.id) ? (
                            <>
                              <Loader2 className="mr-1 h-3 w-3 animate-spin" />
                              Deleting...
                            </>
                          ) : (
                            <>
                              <Trash2 className="mr-1 h-3 w-3" />
                              Delete
                            </>
                          )}
                        </Button>
                      </div>
                    </div>
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
